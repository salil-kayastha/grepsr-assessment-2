name: ArgoCD CI/CD Pipeline

on:
  push:
    branches: [main, develop, feature/*]
  pull_request:
    branches: [main, develop]

env:
  REGISTRY_URL: "docker.io"
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    outputs:
      image-tag: ${{ steps.meta.outputs.tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Generate image metadata
        id: meta
        run: |
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          COMMIT_SHA=${GITHUB_SHA::8}
          IMAGE_TAG="${BRANCH_NAME}-${COMMIT_SHA}"
          echo "tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT
          echo "branch=${BRANCH_NAME}" >> $GITHUB_OUTPUT
          echo "sha=${COMMIT_SHA}" >> $GITHUB_OUTPUT

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push API service
        uses: docker/build-push-action@v5
        with:
          context: ./api-service
          push: true
          tags: |
            ${{ env.DOCKER_USERNAME }}/api-service:${{ steps.meta.outputs.tag }}
            ${{ env.DOCKER_USERNAME }}/api-service:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Frontend service
        uses: docker/build-push-action@v5
        with:
          context: ./frontend-service
          push: true
          tags: |
            ${{ env.DOCKER_USERNAME }}/frontend-service:${{ steps.meta.outputs.tag }}
            ${{ env.DOCKER_USERNAME }}/frontend-service:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Worker service
        uses: docker/build-push-action@v5
        with:
          context: ./worker-service
          push: true
          tags: |
            ${{ env.DOCKER_USERNAME }}/worker-service:${{ steps.meta.outputs.tag }}
            ${{ env.DOCKER_USERNAME }}/worker-service:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  update-manifests:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Kustomize
        uses: imranismail/setup-kustomize@v2

      - name: Update image tags in manifests
        run: |
          IMAGE_TAG="${{ needs.build-and-push.outputs.image-tag }}"
          BRANCH_NAME="${{ needs.build-and-push.outputs.branch }}"

          # Determine target environment based on branch
          if [[ "$BRANCH_NAME" == "main" ]]; then
            ENV="production"
          elif [[ "$BRANCH_NAME" == "develop" ]]; then
            ENV="staging"
          else
            ENV="dev"
          fi

          echo "Updating $ENV environment with image tag: $IMAGE_TAG"

          # Update image tags in the appropriate overlay
          cd k8s/overlays/$ENV

          # Update API service image
          kustomize edit set image api-service=${{ env.DOCKER_USERNAME }}/api-service:$IMAGE_TAG

          # Update Frontend service image
          kustomize edit set image frontend-service=${{ env.DOCKER_USERNAME }}/frontend-service:$IMAGE_TAG

          # Update Worker service image
          kustomize edit set image worker-service=${{ env.DOCKER_USERNAME }}/worker-service:$IMAGE_TAG

      - name: Commit and push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add k8s/overlays/
          git diff --staged --quiet || git commit -m "Update image tags to ${{ needs.build-and-push.outputs.image-tag }}"
          git push

  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: |
            api-service/package-lock.json
            frontend-service/package-lock.json

      - name: Test API service
        run: |
          cd api-service
          npm ci
          npm test

      - name: Test Frontend service
        run: |
          cd frontend-service
          npm ci
          npm test -- --coverage --watchAll=false

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Test Worker service
        run: |
          cd worker-service
          pip install -r requirements.txt
          pip install pytest pytest-cov
          python -m pytest tests/ --cov=src --cov-report=xml || true

  deploy-notification:
    needs: [build-and-push, update-manifests]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && always()

    steps:
      - name: Deployment notification
        run: |
          BRANCH_NAME="${{ needs.build-and-push.outputs.branch }}"
          IMAGE_TAG="${{ needs.build-and-push.outputs.image-tag }}"

          if [[ "$BRANCH_NAME" == "main" ]]; then
            ENV="production"
          elif [[ "$BRANCH_NAME" == "develop" ]]; then
            ENV="staging"
          else
            ENV="dev"
          fi

          echo "üöÄ Deployment triggered for $ENV environment"
          echo "üì¶ Image tag: $IMAGE_TAG"
          echo "üîÑ ArgoCD will automatically sync the changes"
          echo "üåê Check ArgoCD UI: https://localhost:8080"
